
    
/*
fn run_sim(){
    
    
    thread::spawn(|| {
        let start_anvil = "./shell_scripts/simulation/start_anvil.sh";
        do_cmd_arg("bash", start_anvil);
    });
    
    
    let deploy_tokens = "./shell_scripts/deploy_tokens.sh";
    do_cmd_arg("bash", deploy_tokens);
    
    
}



fn do_cmd(cmd: &str) {
    let pwd_output = Command::new(cmd)
        .output()
        .expect("Failed to execute command");
    
    print_std(pwd_output.stdout);
    println!("{}",pwd_output.status);
    print_std(pwd_output.stderr);
}


fn do_cmd_arg(cmd: &str, arg: &str){
    let output = Command::new(cmd)
        .arg(arg)
        .arg("&")
        .output()
        .expect("Failed to execute command");

    
    print_std(output.stdout);
    println!("{}",output.status);
    print_std(output.stderr);
}

fn print_std(msg: Vec<u8>){
    println!("{}",String::from_utf8(msg).unwrap());
}



found out how to view prettified json in vs code with ctrl+shift+i
fn fix_log(){
    let chain_log: &str = &*read_file("chain_log.json");
    
    let json: serde::Value = serde::from_str(chain_log).expect("JSON was not well-formatted");
    
    let pretty_json = serde::to_string_pretty(&json).expect("failed to create pretty json");
    
    write_to_file(pretty_json);
    
}

fn write_to_file(pretty_json: String) {
    let mut data_file = File::create("chain_log.json").expect("creation failed");

    // Write contents to the file
    data_file.write(pretty_json.as_bytes()).expect("write failed");
}


fn read_file(path: &str) -> String {
    let mut data_file = File::open(path).unwrap();//.expect("opening file failed");
    let mut file_content = String::new();

    // Copy contents of file to a mutable string
    data_file.read_to_string(&mut file_content).unwrap();
    file_content
}
 */